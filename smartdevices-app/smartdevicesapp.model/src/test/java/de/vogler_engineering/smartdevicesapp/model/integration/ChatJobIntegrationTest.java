/**
 * Copyright (c) Vogler Engineering GmbH. All rights reserved.
 * Licensed under the MIT License. See LICENSE.md in the project root for license information.
 */
package de.vogler_engineering.smartdevicesapp.model.integration;

import androidx.arch.core.executor.testing.InstantTaskExecutorRule;
import android.util.Log;

import net.lachlanmckee.timberjunit.TimberTestRule;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.junit.rules.TestRule;

import java.util.UUID;

import de.vogler_engineering.smartdevicesapp.common.rx.SchedulersFacade;
import de.vogler_engineering.smartdevicesapp.common.test.categories.IntegrationTests;
import de.vogler_engineering.smartdevicesapp.model.entities.DeviceId;
import de.vogler_engineering.smartdevicesapp.model.entities.dto.JobEntryDto;
import de.vogler_engineering.smartdevicesapp.model.entities.job.JobStatus;
import de.vogler_engineering.smartdevicesapp.model.mock.AppManagerMock;
import de.vogler_engineering.smartdevicesapp.model.mock.RepositoryMockManager;
import de.vogler_engineering.smartdevicesapp.model.mock.TimberAssertingOnErrorTestRule;
import de.vogler_engineering.smartdevicesapp.model.repository.JobRepository;
import de.vogler_engineering.smartdevicesapp.model.sampledata.ChatMessageTester;

@Category(IntegrationTests.class)
public class ChatJobIntegrationTest extends AbstractIntegrationTest {

    private static final String TAG = "ChatJobIntegrationTest";

    RepositoryMockManager rmm;

    private ChatMessageTester mChatMessageTester;

    @Before
    public void before() throws Exception {
        //Setup Repositories
        rmm = new RepositoryMockManager();
        rmm.init();
        mChatMessageTester =
                new ChatMessageTester(rmm.getAppManager(), rmm.getSchedulersFacade(), rmm.getJobRepository(), rmm.getMessageRepository());
    }

    @Test
    public void testChatWorkflow(){
        AppManagerMock appManager = rmm.getAppManagerMock();
        JobRepository jobRepository = rmm.getJobRepository();
        SchedulersFacade schedulersFacade = rmm.getSchedulersFacade();

        final DeviceId device = new DeviceId("debug1.A");
        appManager.deviceId.postValue(device);

        UUID uuid = mChatMessageTester.StartChatJob().blockingGet();

        String res = mChatMessageTester.SendChatJob(
                "debug1",
                "Hello, this is a autogenerated Test message!",
                uuid).blockingGet();

        JobEntryDto jobEntryDto = mChatMessageTester.WaitForChatMessage().blockingGet();
        String s = mChatMessageTester.AcceptChatMessage(
                jobEntryDto.getEntry().getId(),
                jobEntryDto.getEntry().getResource())
                .blockingGet();

        int retry = 5;
        JobEntryDto entry = null;
        while (retry > 0){
            entry = mChatMessageTester.WaitForChatMessage(jobEntryDto.getEntry().getId(), 2, 250).blockingGet();
            Assert.assertNotNull(entry);
            Assert.assertNotNull(entry.getEntry());
            if(entry.getEntry().getStatus() == JobStatus.Done){
                retry = 0;
            }
            try {
                Thread.sleep(200);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            retry--;
        }
        Assert.assertEquals(JobStatus.Done, entry.getEntry().getStatus());
    }
}
